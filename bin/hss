#!/usr/bin/env python3

import os
import sys
import shlex
import subprocess as sp
import asyncio as aio
from pathlib import Path
from argparse import ArgumentParser
from unicodedata import normalize

_HOST = os.getenv("LC_HOSTNAME", "MBP")
_TMPDIR = "/Volumes/RAMDisk"
_sem = aio.Semaphore(3)


def ssh(*command, stdin: str = None, stdout=None, stderr=None):
    return sp.run(["ssh", "-T", _HOST, *map(shlex.quote, command)],
                  check=True, input=stdin.encode("utf-8") if stdin else None,
                  stdout=stdout, stderr=stderr)


async def rsync(local_path, remote_path: str, stdout=None, stderr=None):
    args = ["rsync", "-amL", "--info=progress2",
            str(local_path),
            f"{_HOST}:{shlex.quote(normalize(remote_path, 'NFD'))}"]
    async with _sem:
        return sp.run(args, check=True, stdout=stdout, stderr=stderr)


def get_parser():
    parser = ArgumentParser(
        description="Exec the given command in remote host")

    parser.add_argument("command")
    parser.add_argument("-c", "--args", nargs="*", default=[])
    parser.add_argument("-v",
                        "--verbose",
                        action="count",
                        dest="verbose",
                        default=0)
    parser.add_argument("-r",
                        "--recursive",
                        action="store_true",
                        dest="recursive")
    parser.add_argument("-p",
                        "--preserve-name",
                        action="store_true",
                        dest="preserve")
    parser.add_argument("-e",
                        "--extension",
                        action="store",
                        dest="extension",
                        default="")
    parser.add_argument("-d",
                        "--dir",
                        metavar="TEMP_DIR",
                        dest="dir",
                        action="store")
    parser.add_argument("file", metavar="file(s) or directory(s)", nargs="*")

    return parser


def hash_file(file):
    return sp.check_output(["md5sum", str(file)], text=True).split()[0]


async def main():
    args = get_parser().parse_args()
    command: str = args.command
    remote_args: list[str] = args.args
    files_list = list(map(Path, args.file))

    stdin = None
    stdout = None if args.verbose > 0 else sp.DEVNULL
    stderr = None if args.verbose > 1 else sp.DEVNULL

    tasks = []

    if files_list:
        async def send_file(file):
            file_ext = "".join(file.suffixes)
            file_stem = file.name.removesuffix(file_ext)
            if not recursive and ext:
                file_ext = ext if ext.startswith(".") else f".{ext}"
            suffix = "" if args.preserve else f"_{hash_file(file)[:8]}"

            remote_path = str(tmp_dir / suffix.join((file_stem, file_ext)))
            _ = await rsync(file, remote_path, stdout=stdout, stderr=stderr)
            return remote_path

        tmp_dir = Path(args.dir if args.dir else _TMPDIR)
        if command != "open":
            tmp_dir = tmp_dir / command

        _ = ssh("mkdir", "-p", str(tmp_dir), stdout=stdout, stderr=stderr)

        recursive = args.recursive
        ext = args.extension
        for file in files_list:
            tasks.append(aio.create_task(send_file(file)))

        remote_args.extend(await aio.gather(*tasks))

    if not sys.stdin.isatty():
        stdin = sys.stdin.read()

    _ = ssh(command, *remote_args, stdin=stdin, stdout=stdout, stderr=stderr)


if __name__ == '__main__':
    aio.run(main())
