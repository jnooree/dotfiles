#!/usr/bin/python3

import asyncio as aio
import os
import shlex
import sys
from argparse import REMAINDER, ArgumentParser
from asyncio import subprocess as sp
from pathlib import Path
from typing import List, Optional
from unicodedata import normalize

_HOST = os.getenv("LC_HOSTNAME", "MBP")
_TMPDIR = "/Volumes/RAMDisk"


async def run(
    *command,
    stdin: Optional[str] = None,
    stdout=None,
    stderr=None,
    check: bool = True,
):
    proc = await sp.create_subprocess_exec(
        *command,
        stdin=sp.PIPE if stdin else None,
        stdout=stdout,
        stderr=stderr,
    )
    out, err = await proc.communicate(stdin.encode("utf-8") if stdin else None)

    if check and proc.returncode:
        msg = f"{command} returned {proc.returncode}"
        if out:
            msg += f"\nstdout: {out}"
        if err:
            msg += f"\nstderr: {err}"
        raise RuntimeError(msg)

    return proc.returncode, out, err


async def hash_file(file):
    _, stdout, _ = await run("md5sum", str(file), stdout=sp.PIPE)
    return stdout.decode("utf-8").split()[0]


async def ssh(*command, **kwargs):
    return await run("ssh", "-T", _HOST, *map(shlex.quote, command), **kwargs)


async def rsync(sem, local_path, remote_path, **kwargs):
    async with sem:
        args = [
            "rsync",
            "-amL",
            "--info=progress2",
            local_path,
            f"{_HOST}:{shlex.quote(normalize('NFD', remote_path))}",
        ]
        return await run(*args, **kwargs)


async def async_main(
    args,
    command: str,
    remote_args: List[str],
    files: List[Path],
    stdout,
    stderr,
):
    if files:
        sem = aio.Semaphore(3)

        async def send_file(file: Path):
            file_ext = "".join(file.suffixes)
            file_stem = file.name
            if file_stem.endswith(file_ext):
                file_stem = file_stem[: -len(file_ext)]
            if not recursive and ext:
                file_ext = ext if ext.startswith(".") else f".{ext}"

            md5 = await hash_file(file)
            suffix = "" if args.preserve else f"_{md5[:8]}"

            remote_path = str(tmp_dir / suffix.join((file_stem, file_ext)))
            await rsync(sem, file, remote_path, stdout=stdout, stderr=stderr)
            return remote_path

        tmp_dir = Path(args.dir if args.dir else _TMPDIR)
        if command != "open":
            tmp_dir = tmp_dir / command

        await ssh("mkdir", "-p", str(tmp_dir), stdout=stdout, stderr=stderr)

        recursive = args.recursive
        ext = args.extension
        remote_args.extend(await aio.gather(*map(send_file, files)))

    stdin = None if sys.stdin.isatty() else sys.stdin.read()
    await ssh(command, *remote_args, stdin=stdin, stdout=stdout, stderr=stderr)


def get_parser():
    parser = ArgumentParser(
        description="Exec the given command in remote host"
    )

    parser.add_argument(
        "-v", "--verbose", action="count", dest="verbose", default=0
    )
    parser.add_argument(
        "-r", "--recursive", action="store_true", dest="recursive"
    )
    parser.add_argument(
        "-p", "--preserve-name", action="store_true", dest="preserve"
    )
    parser.add_argument(
        "-e", "--extension", action="store", dest="extension", default=""
    )
    parser.add_argument(
        "-d", "--dir", metavar="TEMP_DIR", dest="dir", action="store"
    )

    parser.add_argument(
        "args",
        help="command and file(s), will be parsed again",
        nargs=REMAINDER,
        metavar="command-and-files",
    )

    return parser


def split_args(args: List[str]):
    cmd, *args = args
    try:
        until = args.index("--")
    except ValueError:
        return cmd, [], args
    return cmd, args[until + 1 :], args[:until]


def main():
    args = get_parser().parse_args()
    command, remote_args, files = split_args(args.args)
    files = list(map(Path, files))

    stdout = None if args.verbose > 0 else sp.PIPE
    stderr = None if args.verbose > 1 else sp.PIPE

    try:
        return aio.run(
            async_main(args, command, remote_args, files, stdout, stderr)
        )
    except Exception as e:
        if args.verbose > 0:
            raise
        sys.stderr.write(f"{type(e).__name__}: {e}\n")
        return 1


if __name__ == "__main__":
    exit(main())
